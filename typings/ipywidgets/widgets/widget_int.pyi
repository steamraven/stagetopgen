"""
This type stub file was generated by pyright.
"""

from .widget_description import DescriptionStyle, DescriptionWidget
from .valuewidget import ValueWidget
from .widget import register
from .widget_core import CoreWidget

"""Int class.

Represents an unbounded int using a widget.
"""
_int_doc_t = ...
_bounded_int_doc_t = ...
class _Int(DescriptionWidget, ValueWidget, CoreWidget):
    """Base class for widgets that represent an integer."""
    value = ...
    def __init__(self, value=..., **kwargs) -> None:
        ...
    


class _BoundedInt(_Int):
    """Base class for widgets that represent an integer bounded from above and below.
    """
    max = ...
    min = ...
    def __init__(self, value=..., min=..., max=..., step=..., **kwargs) -> None:
        ...
    


@register
@_int_doc
class IntText(_Int):
    """Textbox widget that represents an integer."""
    _view_name = ...
    _model_name = ...
    disabled = ...
    continuous_update = ...
    step = ...


@register
@_bounded_int_doc
class BoundedIntText(_BoundedInt):
    """Textbox widget that represents an integer bounded from above and below.
    """
    _view_name = ...
    _model_name = ...
    disabled = ...
    continuous_update = ...
    step = ...


@register
class SliderStyle(DescriptionStyle, CoreWidget):
    """Button style widget."""
    _model_name = ...
    handle_color = ...


@register
@_bounded_int_doc
class IntSlider(_BoundedInt):
    """Slider widget that represents an integer bounded from above and below.
    """
    _view_name = ...
    _model_name = ...
    step = ...
    orientation = ...
    readout = ...
    readout_format = ...
    continuous_update = ...
    disabled = ...
    style = ...
    behavior = ...


@register
class ProgressStyle(DescriptionStyle, CoreWidget):
    """Button style widget."""
    _model_name = ...
    bar_color = ...


@register
@_bounded_int_doc
class IntProgress(_BoundedInt):
    """Progress bar that represents an integer bounded from above and below.
    """
    _view_name = ...
    _model_name = ...
    orientation = ...
    bar_style = ...
    style = ...


class _IntRange(_Int):
    value = ...
    @property
    def lower(self): # -> Any:
        ...
    
    @lower.setter
    def lower(self, lower): # -> None:
        ...
    
    @property
    def upper(self): # -> Any:
        ...
    
    @upper.setter
    def upper(self, upper): # -> None:
        ...
    


@register
class Play(_BoundedInt):
    """Play/repeat buttons to step through values automatically, and optionally loop.
    """
    _view_name = ...
    _model_name = ...
    playing = ...
    repeat = ...
    interval = ...
    step = ...
    disabled = ...
    show_repeat = ...


class _BoundedIntRange(_IntRange):
    max = ...
    min = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


@register
class IntRangeSlider(_BoundedIntRange):
    """Slider/trackbar that represents a pair of ints bounded by minimum and maximum value.

    Parameters
    ----------
    value : int tuple
        The pair (`lower`, `upper`) of integers
    min : int
        The lowest allowed value for `lower`
    max : int
        The highest allowed value for `upper`
    step : int
        step of the trackbar
    description : str
        name of the slider
    orientation : {'horizontal', 'vertical'}
        default is 'horizontal'
    readout : {True, False}
        default is True, display the current value of the slider next to it
    behavior : str
        slider handle and connector dragging behavior. Default is 'drag-tap'.
    readout_format : str
        default is '.2f', specifier for the format function used to represent
        slider value for human consumption, modeled after Python 3's format
        specification mini-language (PEP 3101).
    """
    _view_name = ...
    _model_name = ...
    step = ...
    orientation = ...
    readout = ...
    readout_format = ...
    continuous_update = ...
    style = ...
    disabled = ...
    behavior = ...


