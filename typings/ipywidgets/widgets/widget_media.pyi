"""
This type stub file was generated by pyright.
"""

from .widget_core import CoreWidget
from .domwidget import DOMWidget
from .valuewidget import ValueWidget
from .widget import register

@register
class _Media(DOMWidget, ValueWidget, CoreWidget):
    """Base class for Image, Audio and Video widgets.

    The `value` of this widget accepts a byte string.  The byte string is the
    raw data that you want the browser to display.

    If you pass `"url"` to the `"format"` trait, `value` will be interpreted
    as a URL as bytes encoded in UTF-8.
    """
    value = ...
    @classmethod
    def from_url(cls, url, **kwargs): # -> Self@_Media:
        """
        Create an :class:`Media` from a URL.

        :code:`Media.from_url(url)` is equivalent to:

        .. code-block: python

            med = Media(value=url, format='url')

        But both unicode and bytes arguments are allowed for ``url``.

        Parameters
        ----------
        url: [str, bytes]
            The location of a URL to load.
        """
        ...
    
    def set_value_from_file(self, filename): # -> None:
        """
        Convenience method for reading a file into `value`.

        Parameters
        ----------
        filename: str
            The location of a file to read into value from disk.
        """
        ...
    


@register
class Image(_Media):
    """Displays an image as a widget.

    The `value` of this widget accepts a byte string.  The byte string is the
    raw image data that you want the browser to display.  You can explicitly
    define the format of the byte string using the `format` trait (which
    defaults to "png").

    If you pass `"url"` to the `"format"` trait, `value` will be interpreted
    as a URL as bytes encoded in UTF-8.
    """
    _view_name = ...
    _model_name = ...
    format = ...
    width = ...
    height = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @classmethod
    def from_file(cls, filename, **kwargs): # -> Self@Image:
        ...
    
    def __repr__(self): # -> str:
        ...
    


@register
class Video(_Media):
    """Displays a video as a widget.

    The `value` of this widget accepts a byte string.  The byte string is the
    raw video data that you want the browser to display.  You can explicitly
    define the format of the byte string using the `format` trait (which
    defaults to "mp4").

    If you pass `"url"` to the `"format"` trait, `value` will be interpreted
    as a URL as bytes encoded in UTF-8.
    """
    _view_name = ...
    _model_name = ...
    format = ...
    width = ...
    height = ...
    autoplay = ...
    loop = ...
    controls = ...
    @classmethod
    def from_file(cls, filename, **kwargs): # -> Self@Video:
        ...
    
    def __repr__(self): # -> str:
        ...
    


@register
class Audio(_Media):
    """Displays a audio as a widget.

    The `value` of this widget accepts a byte string.  The byte string is the
    raw audio data that you want the browser to display.  You can explicitly
    define the format of the byte string using the `format` trait (which
    defaults to "mp3").

    If you pass `"url"` to the `"format"` trait, `value` will be interpreted
    as a URL as bytes encoded in UTF-8.
    """
    _view_name = ...
    _model_name = ...
    format = ...
    autoplay = ...
    loop = ...
    controls = ...
    @classmethod
    def from_file(cls, filename, **kwargs): # -> Self@Audio:
        ...
    
    def __repr__(self): # -> str:
        ...
    


