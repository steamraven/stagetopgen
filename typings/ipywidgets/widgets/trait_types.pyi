"""
This type stub file was generated by pyright.
"""

import traitlets
import datetime as dt

"""
Trait types for html widgets.
"""
_color_names = ...
_color_hex_re = ...
_color_hexa_re = ...
_color_frac_percent = ...
_color_int_percent = ...
_color_rgb = ...
_color_rgba = ...
_color_hsl = ...
_color_hsla = ...
_color_rgbhsl_re = ...
class Color(traitlets.Unicode):
    """A string holding a valid HTML color such as 'blue', '#060482', '#A80'"""
    info_text = ...
    default_value = ...
    def validate(self, obj, value): # -> str | None:
        ...
    


class Datetime(traitlets.TraitType):
    """A trait type holding a Python datetime object"""
    klass = dt.datetime
    default_value = ...


class Date(traitlets.TraitType):
    """A trait type holding a Python date object"""
    klass = dt.date
    default_value = ...


class Time(traitlets.TraitType):
    """A trait type holding a Python time object"""
    klass = dt.date
    default_value = ...


def datetime_to_json(pydt, manager): # -> dict[str, Unknown] | None:
    """Serialize a Python datetime object to json.

    Instantiating a JavaScript Date object with a string assumes that the
    string is a UTC string, while instantiating it with constructor arguments
    assumes that it's in local time:

    >>> cdate = new Date('2015-05-12')
    Mon May 11 2015 20:00:00 GMT-0400 (Eastern Daylight Time)
    >>> cdate = new Date(2015, 4, 12) // Months are 0-based indices in JS
    Tue May 12 2015 00:00:00 GMT-0400 (Eastern Daylight Time)

    Attributes of this dictionary are to be passed to the JavaScript Date
    constructor.
    """
    ...

def datetime_from_json(js, manager): # -> datetime | None:
    """Deserialize a Python datetime object from json."""
    ...

datetime_serialization = ...
def naive_to_json(pydt, manager): # -> dict[str, Unknown] | None:
    """Serialize a naive Python datetime object to json.

    Instantiating a JavaScript Date object with a string assumes that the
    string is a UTC string, while instantiating it with constructor arguments
    assumes that it's in local time:

    >>> cdate = new Date('2015-05-12')
    Mon May 11 2015 20:00:00 GMT-0400 (Eastern Daylight Time)
    >>> cdate = new Date(2015, 4, 12) // Months are 0-based indices in JS
    Tue May 12 2015 00:00:00 GMT-0400 (Eastern Daylight Time)

    Attributes of this dictionary are to be passed to the JavaScript Date
    constructor.
    """
    ...

def naive_from_json(js, manager): # -> datetime | None:
    """Deserialize a naive Python datetime object from json."""
    ...

naive_serialization = ...
def date_to_json(pydate, manager): # -> dict[str, Unknown] | None:
    """Serialize a Python date object.

    Attributes of this dictionary are to be passed to the JavaScript Date
    constructor.
    """
    ...

def date_from_json(js, manager): # -> date | None:
    """Deserialize a Javascript date."""
    ...

date_serialization = ...
class ByteMemoryView(traitlets.TraitType):
    """A trait for memory views of bytes."""
    default_value = ...
    info_text = ...
    def validate(self, obj, value): # -> memoryview | None:
        ...
    
    def default_value_repr(self): # -> str:
        ...
    


class CByteMemoryView(ByteMemoryView):
    """A casting version of the byte memory view trait."""
    def validate(self, obj, value): # -> memoryview | None:
        ...
    


def time_to_json(pyt, manager): # -> dict[str, Unknown] | None:
    """Serialize a Python time object to json."""
    ...

def time_from_json(js, manager): # -> time | None:
    """Deserialize a Python time object from json."""
    ...

time_serialization = ...
def datetime_to_json(pydt, manager): # -> dict[str, Unknown] | None:
    """Serialize a Python datetime object to json.

    Instantiating a JavaScript Date object with a string assumes that the
    string is a UTC string, while instantiating it with constructor arguments
    assumes that it's in local time:

    >>> cdate = new Date('2015-05-12')
    Mon May 11 2015 20:00:00 GMT-0400 (Eastern Daylight Time)
    >>> cdate = new Date(2015, 4, 12) // Months are 0-based indices in JS
    Tue May 12 2015 00:00:00 GMT-0400 (Eastern Daylight Time)

    Attributes of this dictionary are to be passed to the JavaScript Date
    constructor.
    """
    ...

def datetime_from_json(js, manager): # -> datetime | None:
    """Deserialize a Python datetime object from json."""
    ...

datetime_serialization = ...
class InstanceDict(traitlets.Instance):
    """An instance trait which coerces a dict to an instance.

    This lets the instance be specified as a dict, which is used
    to initialize the instance.

    Also, we default to a trivial instance, even if args and kwargs
    is not specified."""
    def validate(self, obj, value): # -> None:
        ...
    
    def make_dynamic_default(self): # -> Any:
        ...
    


_number_format_re = ...
_number_format_types = ...
class NumberFormat(traitlets.Unicode):
    """A string holding a number format specifier, e.g. '.3f'

    This traitlet holds a string that can be passed to the
    `d3-format <https://github.com/d3/d3-format>`_ JavaScript library.
    The format allowed is similar to the Python format specifier (PEP 3101).
    """
    info_text = ...
    default_value = ...
    def validate(self, obj, value): # -> str | None:
        ...
    


class TypedTuple(traitlets.Container):
    """A trait for a tuple of any length with type-checked elements."""
    klass = tuple
    _cast_types = ...


def bytes_from_json(js, obj): # -> None:
    ...

bytes_serialization = ...
