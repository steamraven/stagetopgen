"""
This type stub file was generated by pyright.
"""

from .widget_description import DescriptionStyle, DescriptionWidget
from .widget_core import CoreWidget
from .valuewidget import ValueWidget
from .widget import register

"""Bool class.

Represents a boolean using a widget.
"""
@register
class CheckboxStyle(DescriptionStyle, CoreWidget):
    """Checkbox widget style."""
    _model_name = ...
    background = ...


@register
class ToggleButtonStyle(DescriptionStyle, CoreWidget):
    """ToggleButton widget style."""
    _model_name = ...
    font_family = ...
    font_size = ...
    font_style = ...
    font_variant = ...
    font_weight = ...
    text_color = ...
    text_decoration = ...


class _Bool(DescriptionWidget, ValueWidget, CoreWidget):
    """A base class for creating widgets that represent booleans."""
    value = ...
    disabled = ...
    def __init__(self, value=..., **kwargs) -> None:
        ...
    
    _model_name = ...


@register
class Checkbox(_Bool):
    """Displays a boolean `value` in the form of a checkbox.

    Parameters
    ----------
    value : {True,False}
        value of the checkbox: True-checked, False-unchecked
    description : str
        description displayed next to the checkbox
    indent : {True,False}
        indent the control to align with other controls with a description. The style.description_width attribute controls this width for consistence with other controls.
    """
    _view_name = ...
    _model_name = ...
    indent = ...
    style = ...


@register
class ToggleButton(_Bool):
    """Displays a boolean `value` in the form of a toggle button.

    Parameters
    ----------
    value : {True,False}
        value of the toggle button: True-pressed, False-unpressed
    description : str
        description displayed on the button
    icon: str
        font-awesome icon name
    style: instance of DescriptionStyle
        styling customizations
    button_style: enum
        button predefined styling
    """
    _view_name = ...
    _model_name = ...
    icon = ...
    button_style = ...
    style = ...


@register
class Valid(_Bool):
    """Displays a boolean `value` in the form of a green check (True / valid)
    or a red cross (False / invalid).

    Parameters
    ----------
    value: {True,False}
        value of the Valid widget
    """
    readout = ...
    _view_name = ...
    _model_name = ...


