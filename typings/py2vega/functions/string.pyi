"""
This type stub file was generated by pyright.
"""

"""String module that implements mocking Vega string functions."""
string_functions = ...
error_message = ...
def indexof(string, substring):
    """Return the first index of substring in the input string."""
    ...

def lastindexof(string, substring):
    """Return the last index of substring in the input string."""
    ...

def length(string):
    """Return the length of the input string."""
    ...

def lower(string):
    """Transform string to lower-case letters."""
    ...

def pad(string: str, length: int, character: str, align: str) -> str:
    """Pad a string value with repeated instances of a character up to a specified length.

    If character is not specified, a space (‘ ‘) is used. By default, padding is added to the end of a string.
    An optional align parameter specifies if padding should be added to the 'left' (beginning), 'center',
    or 'right' (end) of the input string.
    """
    ...

def parseFloat(string):
    """Parse the input string to a floating-point value. Same as JavaScript’s parseFloat."""
    ...

def parseInt(string):
    """Parse the input string to an integer value. Same as JavaScript’s parseInt."""
    ...

def replace(string, pattern, replacement):
    """Return a new string with some or all matches of pattern replaced by a replacement string.

    The pattern can be a string or a regular expression. If pattern is a string, only the first instance will
    be replaced. Same as JavaScript’s String.replace.
    """
    ...

def slice(string, start, end):
    """Return a section of string between the start and end indices.

    If the end argument is negative, it is treated as an offset from the end of the string (length(string) + end).
    """
    ...

def split(string, separator, limit):
    """Return an array of tokens created by splitting the input string according to a provided separator pattern.

    The result can optionally be constrained to return at most limit tokens.
    """
    ...

def substring(string, start, end):
    """Return a section of string between the start and end indices."""
    ...

def trim(string):
    """Return a trimmed string with preceding and trailing whitespace removed."""
    ...

def truncate(string, length, align, ellipsis):
    """Truncate an input string to a target length.

    The optional align argument indicates what part of the string should be truncated: 'left' (the beginning),
    'center', or 'right' (the end). By default, the 'right' end of the string is truncated. The optional
    ellipsis argument indicates the string to use to indicate truncated content; by default the ellipsis
    character … (\u2026) is used.
    """
    ...

def upper(string):
    """Transform string to upper-case letters."""
    ...

