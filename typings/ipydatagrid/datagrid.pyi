"""
This type stub file was generated by pyright.
"""

from collections.abc import Iterator
from ipywidgets.widgets.domwidget import DOMWidget
from pandas import DataFrame

class SelectionIterator(Iterator):
    def __init__(self, selections) -> None:
        ...
    
    def __next__(self): # -> dict[str, Unknown]:
        ...
    


class SelectionHelper:
    """A Helper Class for processing selections. Provides an iterator
    to traverse selected cells.
    """
    def __init__(self, data, selections, selection_mode, **kwargs) -> None:
        ...
    
    def __iter__(self): # -> SelectionIterator:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def all(self): # -> list[Unknown]:
        """
        Returns all selected cells as a list. Each cell is
        represented as a dictionary
        with keys 'r': row and 'c': column
        """
        ...
    
    def all_values(self): # -> list[Unknown | None]:
        """
        Returns values for all selected cells as a list.
        """
        ...
    


_data_serialization = ...
_widgets_dict_serialization = ...
class DataGrid(DOMWidget):
    """A Grid Widget with filter, sort and selection capabilities.

    Attributes
    ----------
    base_row_size : int (default: 20)
        Default row height
    base_column_size : int (default: 64)
        Default column width
    base_row_header_size : int (default: 64)
        Default row header width
    base_column_header_size : int (default: 20)
        Default column header height
    header_visibility : {'all', 'row', 'column', 'none'} (default: 'all')
        Header visibility mode
        'all': both row and column headers visible
        'row': only row headers visible
        'column': only column headers visible
        'none': neither row and column headers visible
    dataframe : pandas dataframe
        Data to display on Data Grid.
    renderers : dict
        Custom renderers to use for cell rendering. Keys of dictionary specify
        column name, and value specifies the renderer
    default_renderer : CellRenderer (default: TextRenderer)
        Default renderer to use for cell rendering
    header_renderer : CellRenderer (default: TextRenderer)
        Renderer to use for header cell rendering
    corner_renderer : CellRenderer (default: TextRenderer)
        Renderer to use for corner header cell rendering
    selection_mode : {'row', 'column', 'cell', 'none'} (default: 'none')
        Selection mode used when user clicks on grid or makes selections
        programmatically.
        'row': Selecting a cell will select all the cells on the same row
        'column': Selecting a cell will select all the cells on the same column
        'cell': Individual cell selection
        'none': Selection disabled
    selections : list of dict
        List of all selections. Selections are represented as rectangular
        regions. Rectangles are defined as dictionaries with keys:
        'r1': start row, 'c1': start column, 'r2': end row, 'c2': end column.
        Start of rectangle is top-left corner and end is bottom-right corner
    editable : boolean (default: false)
        Boolean indicating whether cell grid can be directly edited
    column_widths : Dict of strings to int (default: {})
        Dict to specify custom column sizes
        The keys (strings) indicate the names of the columns
        The values (integers) indicate the widths
    auto_fit_columns : Bool (default: True)
        Specify whether column width should automatically be
        determined by the grid
    auto_fit_params : Dict. Specify column auto fit parameters.
        Supported parameters:
        1) area: where to resize column widths - 'row-header',
                'body' or 'all' (default)
        2) padding: add padding to resized column widths (15 pixels by default)
        3) numCols: cap the number of columns to be resized (None)
    grid_style : Dict of {propertyName: string | VegaExpr | Dict}
        Dict to specify global grid styles.
        The keys (strings) indicate the styling property
        The values (css color properties or Vega Expression) indicate the values
        See below for all supported styling properties
    index_name : str (default: "key")
        String to specify the index column name. **Only set when the grid
        is constructed and is not an observable traitlet**

    Accessors (not observable traitlets)
    ---------
    selected_cells : list of dict
        List of selected cells. Each cell is represented as a dictionary
        with keys 'r': row and 'c': column
    selected_cell_values : list
        List of values for all selected cells.
    selected_cell_iterator : iterator
        An iterator to traverse selected cells one by one.

    Supported styling properties:
        void_color : color of the area where the grid is not painted
            on the canvas
        background_color : background color for all body cells
        row_background_color : row-wise background color (can take
            a string or Vega Expression)
        column_background_color : column-wise background color (can take a
            string of Vega Expression)
        grid_line_color : color of both vertical and horizontal grid lines
        vertical_grid_line_color : vertical grid line color
        horizontal_grid_line_color : horizontal grid line color
        header_background_color : background color for all non-body cells
            (index and columns)
        header_grid_line_color : grid line color for all non-body
            cells (index and columns)
        header_vertical_grid_line_color : vertical grid line color
            for all non-body cells
        header_horizontal_grid_line_color : horizontal grid line color
            for all non-body cells
        selection_fill_color : fill color of selected area
        selection_border_color : border color of selected area
        header_selection_fill_color : fill color of headers intersecting with
            selected area at column or row
        header_selection_border_color : border color of headers
            intersecting with selected area at column or row
        cursor_fill_color : fill color of cursor
        cursor_border_color : border color of cursor
        scroll_shadow : Dict of color parameters for scroll shadow (vertical and
            horizontal). Takes three paramaters:
            size : size of shadow in pixels
            color1 : gradient color 1
            color2 : gradient color 2
            color3 : gradient color 3
    """
    _model_name = ...
    _model_module = ...
    _model_module_version = ...
    _view_name = ...
    _view_module = ...
    _view_module_version = ...
    base_row_size = ...
    base_column_size = ...
    base_row_header_size = ...
    base_column_header_size = ...
    header_visibility = ...
    _transforms = ...
    _visible_rows = ...
    _data = ...
    renderers = ...
    default_renderer = ...
    header_renderer = ...
    corner_renderer = ...
    selection_mode = ...
    selections = ...
    editable = ...
    column_widths = ...
    grid_style = ...
    auto_fit_columns = ...
    auto_fit_params = ...
    def __init__(self, dataframe, index_name=..., **kwargs) -> None:
        ...
    
    @property
    def data(self): # -> DataFrame:
        ...
    
    @staticmethod
    def generate_data_object(dataframe, guid_key=..., index_name=...): # -> dict[str, Unknown | list[dict[Unknown, None]]]:
        ...
    
    @data.setter
    def data(self, dataframe): # -> None:
        ...
    
    def get_dataframe_index(self, dataframe): # -> Literal['key']:
        """Returns a primary key to be used in ipydatagrid's
        view of the passed DataFrame"""
        ...
    
    def get_cell_value(self, column_name, primary_key_value): # -> list[Unknown | Any | None]:
        """Gets the value for a single or multiple cells by column name and index name.

        Tuples should be used to index into multi-index columns."""
        ...
    
    def set_cell_value(self, column_name, primary_key_value, new_value): # -> bool:
        """Sets the value for a single cell by column name and primary key.

        Note: This method returns a boolean to indicate if the operation
        was successful.
        """
        ...
    
    def get_cell_value_by_index(self, column_name, row_index): # -> Any:
        """Gets the value for a single cell by column name and row index."""
        ...
    
    def set_cell_value_by_index(self, column_name, row_index, new_value): # -> bool:
        """Sets the value for a single cell by column name and row index.

        Note: This method returns a boolean to indicate if the operation
        was successful.
        """
        ...
    
    def get_visible_data(self) -> DataFrame: # -> DataFrame:
        """Returns a dataframe of the current View."""
        ...
    
    def transform(self, transforms): # -> None:
        """Apply a list of transformation to this DataGrid."""
        ...
    
    def revert(self): # -> None:
        """Revert all transformations."""
        ...
    
    def clear_selection(self) -> None:
        """Clears all selections."""
        ...
    
    def select(self, row1:int, column1:int, row2:int=..., column2:int=..., clear_mode:str=...) -> None:
        """
        Select an individual cell or rectangular cell region.
        Parameters
        ----------
        row1 : int
            Row index for individual cell selection or
            start row index for rectangular region selection.
        column1 : int
            Column index for individual cell selection or
            start column index for rectangular region selection.
        row2 : int or None, optional (default: None)
            End row index for rectangular region selection.
        column2 : int or None, optional (default: None)
            End column index for rectangular region selection.
        clear_mode : string, optional, {'all', 'current', 'none'}
                    (default: 'none')
            Clear mode to use when there are pre-existing selections.
            'all' removes all pre-existing selections
            'current' removes last pre-existing selection
            'none' keeps pre-existing selections
        """
        ...
    
    @property
    def selected_cells(self): # -> list[Unknown]:
        """
        List of selected cells. Each cell is represented as a dictionary
        with keys 'r': row and 'c': column
        """
        ...
    
    @property
    def selected_cell_values(self): # -> list[Unknown | None]:
        """
        List of values for all selected cells.
        """
        ...
    
    @property
    def selected_cell_iterator(self): # -> SelectionHelper:
        """
        An iterator to traverse selected cells one by one.
        """
        ...
    
    def on_cell_change(self, callback, remove=...): # -> None:
        """Register a callback to execute when a cell value changed.

        The callback will be called with one argument, the dictionary
        containing cell information with keys
        "row", "column", "column_index", "value".

        Parameters
        ----------
        remove: bool (optional)
            Set to true to remove the callback from the list of callbacks.
        """
        ...
    
    def on_cell_click(self, callback, remove=...): # -> None:
        """Register a callback to execute when a cell is clicked.

        The callback will be called with one argument, the dictionary
        containing cell information with following keys:
          "region", "column", "column_index", "row", "primary_key_row",
          "cell_value"

        Parameters
        ----------
        remove: bool (optional)
            Set to true to remove the callback from the list of callbacks.
        """
        ...
    


